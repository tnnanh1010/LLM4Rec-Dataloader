def parse_input():
    n = int(input().strip())
    
    # Read preferences for group A
    prefs_A = {}
    for i in range(n):
        line = input().strip().split()
        prefs_A[f"A{i+1}"] = line
    
    # Read preferences for group B
    prefs_B = {}
    for i in range(n):
        line = input().strip().split()
        prefs_B[f"B{i+1}"] = line
    
    # Read the matching M
    matching = {}
    match_input = input().strip().split()
    for i in range(0, len(match_input), 2):
        matching[match_input[i]] = match_input[i+1]
    
    return n, prefs_A, prefs_B, matching

def is_stable(n, prefs_A, prefs_B, matching):
    for A in prefs_A:
        B_current = matching[A]  # A's current partner
        A_prefs = prefs_A[A]      # A's preference list
        
        for B in A_prefs:
            if B == B_current:
                break  # Stop checking when reaching current partner
            
            # Check if B prefers A over its current partner
            A_prime = matching_inverse[B]
            if prefs_B[B].index(A) < prefs_B[B].index(A_prime):
                return False  # Found a blocking pair
    
    return True

if __name__ == "__main__":
    n, prefs_A, prefs_B, matching = parse_input()
    
    # Create inverse matching (B -> A mapping)
    matching_inverse = {B: A for A, B in matching.items()}
    
    print(is_stable(n, prefs_A, prefs_B, matching))
